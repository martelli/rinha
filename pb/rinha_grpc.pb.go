// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: rinha.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RinhaDB_AddCliente_FullMethodName   = "/RinhaDB/AddCliente"
	RinhaDB_AddTransacao_FullMethodName = "/RinhaDB/AddTransacao"
	RinhaDB_GetExtrato_FullMethodName   = "/RinhaDB/GetExtrato"
)

// RinhaDBClient is the client API for RinhaDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RinhaDBClient interface {
	AddCliente(ctx context.Context, in *Cliente, opts ...grpc.CallOption) (*AddClienteResponse, error)
	AddTransacao(ctx context.Context, in *AddTransacaoRequest, opts ...grpc.CallOption) (*Saldo, error)
	GetExtrato(ctx context.Context, in *ExtratoRequest, opts ...grpc.CallOption) (*Extrato, error)
}

type rinhaDBClient struct {
	cc grpc.ClientConnInterface
}

func NewRinhaDBClient(cc grpc.ClientConnInterface) RinhaDBClient {
	return &rinhaDBClient{cc}
}

func (c *rinhaDBClient) AddCliente(ctx context.Context, in *Cliente, opts ...grpc.CallOption) (*AddClienteResponse, error) {
	out := new(AddClienteResponse)
	err := c.cc.Invoke(ctx, RinhaDB_AddCliente_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rinhaDBClient) AddTransacao(ctx context.Context, in *AddTransacaoRequest, opts ...grpc.CallOption) (*Saldo, error) {
	out := new(Saldo)
	err := c.cc.Invoke(ctx, RinhaDB_AddTransacao_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rinhaDBClient) GetExtrato(ctx context.Context, in *ExtratoRequest, opts ...grpc.CallOption) (*Extrato, error) {
	out := new(Extrato)
	err := c.cc.Invoke(ctx, RinhaDB_GetExtrato_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RinhaDBServer is the server API for RinhaDB service.
// All implementations must embed UnimplementedRinhaDBServer
// for forward compatibility
type RinhaDBServer interface {
	AddCliente(context.Context, *Cliente) (*AddClienteResponse, error)
	AddTransacao(context.Context, *AddTransacaoRequest) (*Saldo, error)
	GetExtrato(context.Context, *ExtratoRequest) (*Extrato, error)
	mustEmbedUnimplementedRinhaDBServer()
}

// UnimplementedRinhaDBServer must be embedded to have forward compatible implementations.
type UnimplementedRinhaDBServer struct {
}

func (UnimplementedRinhaDBServer) AddCliente(context.Context, *Cliente) (*AddClienteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCliente not implemented")
}
func (UnimplementedRinhaDBServer) AddTransacao(context.Context, *AddTransacaoRequest) (*Saldo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransacao not implemented")
}
func (UnimplementedRinhaDBServer) GetExtrato(context.Context, *ExtratoRequest) (*Extrato, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtrato not implemented")
}
func (UnimplementedRinhaDBServer) mustEmbedUnimplementedRinhaDBServer() {}

// UnsafeRinhaDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RinhaDBServer will
// result in compilation errors.
type UnsafeRinhaDBServer interface {
	mustEmbedUnimplementedRinhaDBServer()
}

func RegisterRinhaDBServer(s grpc.ServiceRegistrar, srv RinhaDBServer) {
	s.RegisterService(&RinhaDB_ServiceDesc, srv)
}

func _RinhaDB_AddCliente_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cliente)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinhaDBServer).AddCliente(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RinhaDB_AddCliente_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinhaDBServer).AddCliente(ctx, req.(*Cliente))
	}
	return interceptor(ctx, in, info, handler)
}

func _RinhaDB_AddTransacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransacaoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinhaDBServer).AddTransacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RinhaDB_AddTransacao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinhaDBServer).AddTransacao(ctx, req.(*AddTransacaoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RinhaDB_GetExtrato_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtratoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinhaDBServer).GetExtrato(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RinhaDB_GetExtrato_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinhaDBServer).GetExtrato(ctx, req.(*ExtratoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RinhaDB_ServiceDesc is the grpc.ServiceDesc for RinhaDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RinhaDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RinhaDB",
	HandlerType: (*RinhaDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCliente",
			Handler:    _RinhaDB_AddCliente_Handler,
		},
		{
			MethodName: "AddTransacao",
			Handler:    _RinhaDB_AddTransacao_Handler,
		},
		{
			MethodName: "GetExtrato",
			Handler:    _RinhaDB_GetExtrato_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rinha.proto",
}
